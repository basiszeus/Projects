{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7206513d",
   "metadata": {},
   "source": [
    "# Tools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7cc93eb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from PIL import Image\n",
    "import streamlit as st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "af4744c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Title \n",
    "\n",
    "st.write(\"\"\"\n",
    "# Diabetes screening app\n",
    "## The application can detect whether a person has diabetes or not based on a classification algorithm.\n",
    "\"\"\")\n",
    "\n",
    "#Img\n",
    "\n",
    "image =  Image.open('Webapp.jpg')\n",
    "st.image(image,use_column_width=True)\n",
    "\n",
    "#Get_data :\n",
    "\n",
    "df = pd.read_csv('diabetes.csv')\n",
    "\n",
    "#Subheader\n",
    "\n",
    "st.subheader('Statistics:')\n",
    "\n",
    "#show data as a table\n",
    "\n",
    "st.dataframe(df)\n",
    "\n",
    "#Statistics\n",
    "\n",
    "st.subheader('Summary:')\n",
    "\n",
    "st.write(df.describe())\n",
    "\n",
    "#charts\n",
    "\n",
    "chart = st.bar_chart(df)\n",
    "\n",
    "#Splitting\n",
    "\n",
    "X = df.drop(['Outcome'],axis =1)\n",
    "Y = df['Outcome']\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.25, random_state=0)\n",
    "\n",
    "#Features inputs\n",
    "\n",
    "def get_user_input():\n",
    "    Pregnancies = st.sidebar.slider('Pregnancies', 0,17,3 ) #min 0, max 17, default 3\n",
    "    Glucose = st.sidebar.slider('Glucose Level', 0,200,120 )\n",
    "    BloodPressure = st.sidebar.slider('Your Blood Pressure', 0,140,70)\n",
    "    SkinThickness = st.sidebar.slider('Your Skin Thickness', 0,110,60)\n",
    "    Insulin = st.sidebar.slider('Insulin', 0,900,30)\n",
    "    BMI = st.sidebar.slider('BMI', 0,70,30)\n",
    "    DiabetesPedigreeFunction = st.sidebar.slider('DPF',0.2,2.1,0.5)\n",
    "    Age = st.sidebar.slider('Age', 1,100,20)\n",
    "\n",
    "    user_data = {'Pregnancies':Pregnancies,\n",
    "                'Glucose':Glucose,\n",
    "                 'BloodPressure':BloodPressure,\n",
    "                 'SkinThickness' : SkinThickness,\n",
    "                 'Insulin':Insulin,\n",
    "                 'BMI':BMI,\n",
    "                 'DiabetesPedigreeFunction':DiabetesPedigreeFunction,\n",
    "                 'Age':Age\n",
    "                }\n",
    "    features = pd.DataFrame(user_data, index = [0])\n",
    "    return features\n",
    "\n",
    "#User input\n",
    "\n",
    "user_input = get_user_input()\n",
    "\n",
    "                 \n",
    "#Set a subheader and display the users input\n",
    "st.subheader('User Input:')\n",
    "st.write(user_input)\n",
    "\n",
    "st.subheader('User Data:')\n",
    "User_chart = st.bar_chart(user_input)\n",
    "                 \n",
    "                 \n",
    "#Moddeling\n",
    "\n",
    "RFC = RandomForestClassifier()\n",
    "RFC.fit(X_train,Y_train)\n",
    "                 \n",
    "#model metrics\n",
    "st.subheader('Model Test Accuracy Score:')\n",
    "st.write( str(accuracy_score(Y_test,RFC.predict(X_test))*100)+'%')\n",
    "\n",
    "#Store the model prediction in a variable\n",
    "prediction = RFC.predict(user_input)\n",
    "                 \n",
    "#Set a subheader and display classification\n",
    "st.subheader('Classifiction: ')\n",
    "st.write(prediction)\n",
    "\n",
    "if prediction <1:\n",
    "    st.write('You are probably not diabetic')\n",
    "else:\n",
    "    st.write('You need to see a doctor')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7342c68",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
